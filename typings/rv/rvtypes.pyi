# This is a stub module. The actual implementation is provided by RV.
#
# Generated from code Copyright (C) 2023  Autodesk, Inc. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0

from typing import List, Tuple, Optional, Any

def concat_seperator() -> str: ...

class State:
    """The session State object for all things python"""
    def __init__(self) -> None: ...
    minorModes: List[Any]

class Mode:
    """A mode is a feature unit. It comes in two varieties: major and
    minor. The mode can be declared in its own file and provide key bindings, a
    menu, multiple event tables if needed, a render function, and is
    identifiable by name and icon. When active the minor mode can render and
    its menu is visible. When inactive, the minor mode is completely gone from
    RV."""

    _active: bool
    _modeName: Optional[str]
    _menu: Optional[Any]
    _supportFilesPath: Optional[str]
    _drawOnEmpty: bool
    _drawOnPresentation: bool

    def __init__(self) -> None: ...
    def isActive(self) -> bool: ...
    def modeName(self) -> Optional[str]: ...
    def drawOnEmpty(self) -> bool: ...
    def drawOnPresentation(self) -> bool: ...
    def activate(self) -> None: ...
    def deactivate(self) -> None: ...
    def toggle(self) -> None: ...
    def layout(self, event: Any) -> None: ...
    def render(self, event: Any) -> None: ...
    def supportPath(self, module: Any, packageName: Optional[str] = None) -> str: ...
    def qmlPath(self, module: Any, packageName: Optional[str] = None) -> str: ...
    def configPath(self, packageName: str) -> str: ...

class MinorMode(Mode):
    """MinorModes are modes which are non-exclusive: there can be many minor
    modes active at the same time."""
    def __init__(self) -> None: ...
    def init(
        self,
        name: str,
        globalBindings: Optional[List[Tuple[str, Any, str]]],
        overrideBindings: Optional[List[Tuple[str, Any, str]]],
        menu: Optional[List[Any]] = None,
        sortKey: Optional[Any] = None,
        ordering: int = 0,
    ) -> None: ...
    def setMenu(self, menu: Optional[List[Any]]) -> None: ...
    def setMenuStrict(self, menu: Optional[List[Any]]) -> None: ...
    def defineEventTable(
        self, tableName: str, bindings: List[Tuple[str, Any, str]]
    ) -> None: ...
    def defineEventTableRegex(
        self, tableName: str, bindings: List[Tuple[str, Any, str]]
    ) -> None: ...
    def urlDropFunc(self, url: str) -> Tuple[Optional[Any], Optional[Any]]: ...

class Widget(MinorMode):
    """The Widget class is the base class for HUD widgets. Each Widget must
    provide a set of bindings, a render function (to draw itself) and an
    *accurate* bounds which will determine where events are sent."""

    _x: float
    _y: float
    _w: float
    _h: float
    _downPoint: Tuple[float, float]
    _dragging: bool
    _inCloseArea: bool
    _containsPointer: bool
    _whichMargin: int

    def __init__(self) -> None: ...
    def layout(self, event: Any) -> None: ...
    def render(self, event: Any) -> None: ...
    def init(
        self,
        name: str,
        globalBindings: Optional[List[Tuple[str, Any, str]]],
        overrideBindings: Optional[List[Tuple[str, Any, str]]],
        menu: Optional[List[Any]] = None,
        sortKey: Optional[Any] = None,
        ordering: int = 0,
    ) -> None: ...
    def toggle(self) -> None: ...
    def updateMargins(self, activated: bool) -> None: ...
    def updateBounds(
        self, minp: Tuple[float, float], maxp: Tuple[float, float]
    ) -> None: ...
    def contains(self, p: Tuple[float, float]) -> bool: ...
    def requiredMarginValue(self) -> float: ...
    def drawInMargin(self, whichMargin: int) -> None: ...
    def storeDownPoint(self, event: Any) -> None: ...
    def drag(self, event: Any) -> None: ...
    def near(self, event: Any) -> bool: ...
    def move(self, event: Any) -> None: ...
    def release(self, event: Any, closeFunc: Optional[Any] = None) -> None: ...
