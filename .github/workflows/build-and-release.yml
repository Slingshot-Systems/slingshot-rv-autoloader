name: Build and Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Release version number"
        required: true

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"

      - name: cache poetry install
        uses: actions/cache@v4
        with:
          path: ~/.local
          key: poetry

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-in-project: true
          virtualenvs-create: true

      - name: cache deps
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: .venv
          key: pydeps-${{ hashFiles('**/poetry.lock') }}

      - run: poetry install --no-interaction --no-root
        if: steps.cache-deps.outputs.cache-hit != 'true'

      - run: poetry run poe test # run tests. why not?

      - name: Update Poetry version
        run: |
          poetry version ${{ github.event.inputs.version }}

      - name: Version up PACKAGE file
        run: |
          sed -i "s/version: .*/version: ${{ github.event.inputs.version }}/" src/PACKAGE

      - name: Commit updated files
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
          git add src/PACKAGE pyproject.toml
          git commit -m "Bump version to ${{ github.event.inputs.version }}"
          git push

      - name: Build and package
        run: poetry run python scripts/build.py

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          files: build/*.rvpkg
          tag_name: v${{ github.event.inputs.version }}
          generate_release_notes: true
